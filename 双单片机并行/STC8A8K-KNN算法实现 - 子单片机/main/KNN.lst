C51 COMPILER V9.55   KNN                                                                   05/02/2020 10:59:18 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE KNN
OBJECT MODULE PLACED IN .\KNN.obj
COMPILER INVOKED BY: F:\keil5\C51\BIN\C51.EXE ..\Public\KNN.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Public) DEBUG OBJECTEXT
                    -END PRINT(.\KNN.lst) TABS(2) OBJECT(.\KNN.obj)

line level    source

   1          #include "KNN.h"
   2          Distance distance1;
   3          //求欧式距离
   4          //digit1 测试数据
   5          //digit2 训练数据
   6          //返回值:int类型
   7          int calDistance(char *digit1, char *digit2)
   8          /*求距离*/
   9          {
  10   1          int i, squareSum=0.0;
  11   1          for(i=0; i<JZLenght; i++)
  12   1          {
  13   2              //该处这样做的目的是提高运算速度，因为训练数据标本中只有0和1
  14   2              //所以这种算法处理只适用于标本是0和1的训练数据
  15   2              if(digit1[i]-digit2[i]!=0) squareSum+=1;
  16   2          }
  17   1          return  squareSum;  //返回距离值
  18   1      }
  19          
  20          //输入in 一个结构体数组
  21          //index1 结构体数组的索引，前一个数
  22          //index2 结构体数组的索引，后一个数
  23          //两个结构体数组互换
  24          void exchange(Distance *in, uint8 index1,uint8 index2)
  25          {
  26   1          Distance tmp;
  27   1          tmp = in[index1];
  28   1          in[index1] = in[index2];
  29   1          in[index2] = tmp;
  30   1      }
  31          
  32          
  33          //输入in  一个结构体数组
  34          //lenght 训练数据模板数量
  35          //从小到达排序
  36          void selectSort(Distance *in, uint8 length)
  37          {
  38   1          uint8 i, j, min;
  39   1          uint8 N = length;
  40   1          for(i=0; i<N-1; i++)
  41   1          {
  42   2              min = i;
  43   2              //j=i+1 即该数据后面的数据
  44   2              //算法思想:每次循环将比较小数据往前推一次，直到所有数据排序正确
  45   2              //先判断前一个数据是否大于后一个数据，如果大于则交换，不大与则不交换
  46   2              //最大i*j次可完成排序
  47   2              for(j=i+1; j<N; j++)
  48   2              {
  49   3                  if(in[j].distance<in[min].distance) min = j;
  50   3              }
  51   2              exchange(in,i,min);
  52   2          }
  53   1      }
  54          
C51 COMPILER V9.55   KNN                                                                   05/02/2020 10:59:18 PAGE 2   

  55          //in  输入数据矩阵
  56          //train 测试数据矩阵
  57          //K 选出距离目标值最近的数据的个数
  58          uint8 prediction(uint8 K, char *in, char train[][JZLenght])
  59          {
  60   1          int i, it;
  61   1          int predict = 0;
  62   1          Distance distance[Numtrain]; //距离值暂存,Numtrain训练数据模板长度
  63   1          /*求取输入digit与训练数据的距离*/
  64   1          for(it=0; it<Numtrain; it++)
  65   1          {
  66   2              distance[it].distance = calDistance(in,train[it]);  //求测试数据与训练数据的距离
  67   2              distance[it].label = it;  //由于数组本就是按0-9模板来做下标的,所以这里直接给就行
  68   2          }
  69   1          /*给计算的距离排序*/
  70   1      
  71   1          selectSort(distance, Numtrain);  //对距离值数组进行排序
  72   1          for(i=0; i<K; i++)
  73   1          {
  74   2              predict += distance[i].label;  //取距离目标值最近的K个值
  75   2          }
  76   1          return predict/K;  //返回预测值
  77   1      }
  78          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    459    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      64
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
